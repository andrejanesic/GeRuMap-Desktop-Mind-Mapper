@startuml

' --- ApplicationFramework ---

package core {
    class ApplicationFramework
}

class AppCore <<Singleton>> {
+ {static} void main(String[])
+ {static} ApplicationFramework getInstance()
}
class AppCoreSingleton {
+ {static} AppCore INSTANCE
}
abstract class ApplicationFramework {
# IConstants iConstants
# IConfigHandler iConfigHandler
# IErrorHandler iErrorHandler
# IGui iGui
# ProjectExplorer projectExplorer
# ISerializer iSerializer
+ void initialize(IConstants,IConfigHandler,IErrorHandler,IGui,ProjectExplorer,ISerializer)
}

' --- Repository ---

package repository {
    class IMapNode
    class IMapNodeComposite
    class ProjectExplorer
    class Project
    class MindMap
    class Element
    class MapNodeFactory
    class ProjectExplorerFactory
    class ProjectFactory
    class MindMapFactory
    class ElementFactory
    class MapNodeFactoryUtils
}

abstract class IMapNode {
+ Set<IMapNodeComposite> parents
- String nodeName
+ Set<IMapNodeComposite> getParents()
+ void setParents(Set<IMapNodeComposite>)
+ void addParent(IMapNodeComposite)
+ void removeParent(IMapNodeComposite)
}
abstract class IMapNodeComposite {
- Set<IMapNode> children
+ Set<IMapNode> getChildren()
+ void setChildren(Set<IMapNode>)
+ void addChild(IMapNode)
+ void removeChild(IMapNode)
}
class MapNodeFactoryUtils {
+ {static} MapNodeFactory getElementFactory()
+ {static} MapNodeFactory getMindMapFactory()
+ {static} MapNodeFactory getProjectFactory()
+ {static} MapNodeFactory getProjectExplorerFactory()
}
abstract class MapNodeFactory{
+ IMapNode getNode()
{abstract} + IMapNode createNode()
}
class ProjectExplorerFactory{
+ IMapNode createNode()
}
class ProjectFactory{
+ IMapNode createNode()
}
class MindMapFactory{
+ IMapNode createNode()
}
class ElementFactory{
+ IMapNode createNode()
}
class ProjectExplorer {
}
class Project {
- String authorName
- String filepath
}
class MindMap {
- boolean template
}
class Element {
- int posX
- int posY
- int color
- String content
}

' --- Observer ---

package observer {
    interface IPublisher
    interface IObserver
    interface IMessage
    interface IMessageData
}

interface IPublisher {
- Set<IObserver> observers
+ Set<IObserver> getObservers()
+ void setObservers(Set<IObserver>)
+ void publish(IMessage)
+ void addObserver(IObserver)
+ void removeObserver(IObserver)
}
interface IObserver {
- Set<IPublisher> publishers
+ Set<IPublisher> getPublishers()
+ void setPublishers(Set<IPublisher>)
+ void receive(Object)
+ void addPublisher(IPublisher)
+ void removePublisher(IPublisher)
}
interface IMessage<S, T> {
- S status
- T data
}
interface IMessageData<T> {
- T sender
}

' --- Addon ---

package addon {
    interface IAddon
    interface IAddonMeta
    interface IAddonManager
}

interface IAddon {
+ {abstract} void initialize(ApplicationFramework)
+ {abstract} IGuiAddon getGui()
+ {abstract} IAddonMeta getMeta()
}

interface IAddonMeta {
~ String getName()
~ String getVersion()
~ String getAuthor()
~ String getWebsite()
}

interface IAddonManager {
+ {abstract} Set<IAddon> getAddons()
+ {abstract} void setAddons(Set<IAddon>)
+ {abstract} void addAddon(IAddon)
+ {abstract} void removeAddon(IAddon)
+ {abstract} void loadAddons()
+ {abstract} void initializeAddons()
}

package addon.standard {
    class StandardAddonManager
}

class StandardAddonManager {
+ Set<IAddon> getAddons()
+ void setAddons(Set<IAddon>)
+ void addAddon(IAddon)
+ void removeAddon(IAddon)
+ {abstract} void loadAddons()
+ void initializeAddons()
}

' --- Constants ---

package constants {
    interface IConstants
}

interface IConstants {
+ String FILESYSTEM_LOCAL_CONFIG_FOLDER()
+ String FILESYSTEM_LOCAL_PROJECTS_FOLDER()
+ String FILESYSTEM_LOCAL_GET_CONFIG_FOLDER()
+ String FILESYSTEM_LOCAL_GET_RES_FOLDER()
}

package constants.standard {
    class StandardConstants
}

class StandardConstants {
+ String FILESYSTEM_LOCAL_CONFIG_FOLDER()
+ String FILESYSTEM_LOCAL_PROJECTS_FOLDER()
+ String FILESYSTEM_LOCAL_GET_CONFIG_FOLDER()
+ String FILESYSTEM_LOCAL_GET_RES_FOLDER()
}

' --- ConfigHandler ---

package confighandler {
    interface IConfigHandler
}

interface IConfigHandler {
+ boolean loadConfig(String)
+ boolean loadConfig()
+ void saveConfig()
+ void resetConfig()
+ void set(String,String)
+ Object get(String)
+ Object get(String,Object)
+ Object getOrDefault(String,Object)
}

package confighandler.standard {
    class StandardConfigHandler
}

class StandardConfigHandler {
- {static} HashMap<String,String> DEFAULT_CONFIG
- HashMap<String,String> currentConfig
+ boolean loadConfig(String)
+ void resetConfig()
+ void saveConfig()
+ void set(String,String)
+ Object get(String)
+ Object get(String,Object)
}

' --- Serializer ---

package filesystem {
    class ISerializer
}

interface ISerializer {
+ void saveConfig(Map<String,String>)
+ Map<String,String> loadConfig(String)
+ void saveProject(Project)
+ Project loadProject(String)
+ Project loadProject()
+ IAddon loadAddon(String)
}

package filesystem.local {
    class LocalSerializer
}

class LocalSerializer {
+ void saveConfig(Map<String,String>)
+ Map<String,String> loadConfig(String)
+ void saveProject(Project)
+ Project loadProject(String)
- boolean eraseDb()
- boolean setupDb()
- boolean appendOp()
- boolean encodeNodeState()
- boolean decodeNodeState()
}

' -- Logger ---

package logger {
    interface ILogger {
        + void log(String)
    }
}

package logger.standard {
    class StandardLogger {
        - BufferedReader reader
        - PrintWriter writer
        + void log(String)
        - void writeToIO(String)
    }
}

' --- GUI ---

package gui {
    interface IGui {
    ~ void run()
    }
}

' --- GUI.Swing ---

package GUI.Swing{

    interface IAddonGui {
    + void showGui()
    }

    class GuiSwing {
    + void run()
    }
    class MapTreeCellRenderer {
    + Component getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)
    }
    class MapTreeItem {
    - IMapNode mapNode
    }
    class MyMenuBar {
    }
    class ProjectPanel {
    - JTabbedPane tabs
    - Project project
    - List<MindMap> tabIndexes
    + void openMindMap(MindMap)
    + void closeMindMap(MindMap)
    }
    class MapTreeCellEditor {
    - Object clickedOn
    - JTextField edit
    + Component getTreeCellEditorComponent(JTree,Object,boolean,boolean,boolean,int)
    + boolean isCellEditable(EventObject)
    + void actionPerformed(ActionEvent)
    }
    class MainFrame {
    - {static} ProjectExplorer projectExplorer
    - {static} MainFrame instance
    - MyMenuBar menu
    - Toolbar toolbar
    - ActionManager actionManager
    - IMapTree mapTree
    - MapTreeView mapTreeView
    - ProjectExplorerPanel projectExplorerPanel
    - void initialise()
    }
    interface IProjectPanel {
    ~ void openMindMap(MindMap)
    ~ void closeMindMap(MindMap)
    }
    class ActionManager {
    }
    class MapTree {
    - MapTreeItem root
    - DefaultTreeModel defaultTreeModel
    - MapTreeView treeView
    + MapTreeView generateTree(ProjectExplorer)
    + void refreshTree(boolean)
    }
    class Toolbar {
    }
    class MapTreeSelectionListener {
    + void valueChanged(TreeSelectionEvent)
    }

    interface IMapTree {
    ~ MapTreeView generateTree(ProjectExplorer)
    ~ void refreshTree()
    ~ void refreshTree(boolean)
    }
    class MapTreeView {
    }
}
' --- Relations ---

ApplicationFramework <|-- AppCore
AppCoreSingleton "1..1" *-- "1..1" AppCore
IMapNode <|-- IMapNodeComposite
IMapNode "0..*" --o "0..*" IMapNodeComposite
IMapNode "0..*" --o "0..*" IMapNode
IMapNodeComposite "0..*" --o "0..*" IMapNodeComposite
IMapNodeComposite <|-- ProjectExplorer
ProjectExplorer "0..*" o-- "0..*" Project
Project "0..*" o-- "0..*" MindMap
MindMap "0..*" o-- "0..*" Element
IMapNodeComposite <|-- Project
IMapNodeComposite <|-- MindMap
IMapNode <|-- Element

IAddonManager o-- "0..*" IAddon
IAddonMeta "1" --* IAddon
IAddonGui "1" --* IAddon
IAddonManager <|.. StandardAddonManager

IConstants <|.. StandardConstants
IConfigHandler <|.. StandardConfigHandler

IGui <|.. GuiSwing

ISerializer <|.. LocalSerializer

IObserver <|-- IPublisher
IPublisher <|-- IMapNode
IPublisher <|-- IAddon
IPublisher <|-- IAddonManager
IPublisher <|-- ISerializer
IPublisher <|-- IConfigHandler

ILogger <|-- StandardLogger

AppCore -- StandardAddonManager
AppCore -- StandardConstants
AppCore -- LocalSerializer
AppCore -- StandardConfigHandler
AppCore -- StandardLogger

MainFrame o-- MyMenuBar
MainFrame "1..1" - "1..1" GuiSwing
GuiSwing o-- AppCore
MainFrame o-- Toolbar
MainFrame o-- MapTree
MapTreeView *-- MapTree
IMapTree <|.. MapTree
MapTreeView "1..1" *-- "1..1" MapTreeCellEditor
MapTreeView "1..1" *-- "1..1" MapTreeCellRenderer
MapTreeView "1..1" *-- "1..1" MapTreeSelectionListener
MapTreeItem o-- IMapNode
MapTree"1..*" *-- "1..*" MapTreeItem
MainFrame o-- ActionManager
ProjectPanel <|.. IProjectPanel
MainFrame o-- ProjectPanel

MapNodeFactory "1..1" *-- "1..1" IMapNode
ProjectFactory --|> MapNodeFactory
ProjectExplorerFactory --|> MapNodeFactory
MindMapFactory --|> MapNodeFactory
ElementFactory --|> MapNodeFactory
MapNodeFactoryUtils "1..1" o-- ProjectExplorerFactory
MapNodeFactoryUtils "1..1" o-- ProjectFactory
MapNodeFactoryUtils "1..1" o-- MindMapFactory
MapNodeFactoryUtils "1..1" o-- ElementFactory

@enduml