@startuml

' --- Repository ---

package repository {
    class IMapNode
    class IMapNodeComposite
    class ProjectExplorer
    class Project
    class MindMap
    class Element
}

abstract class IMapNode {
+ Set<IMapNodeComposite> parents
- String nodeName
+ Set<IMapNodeComposite> getParents()
+ void setParents(Set<IMapNodeComposite>)
+ String getNodeName()
+ void setNodeName(String)
+ String toString()
+ void addParent(IMapNodeComposite)
+ void removeParent(IMapNodeComposite)
+ void receive(Object)
}
abstract class IMapNodeComposite {
- Set<IMapNode> children
+ Set<IMapNode> getChildren()
+ void setChildren(Set<IMapNode>)
+ void addChild(IMapNode)
+ void removeChild(IMapNode)
+ void receive(Object)
}
class ProjectExplorer {
}
class Project {
- String authorName
- String filepath
+ String getAuthorName()
+ void setAuthorName(String)
+ String getFilepath()
+ void setFilepath(String)
}
class MindMap {
- boolean template
+ boolean isTemplate()
+ void setTemplate(boolean)
}
class Element {
- int posX
- int posY
- int color
- String content
+ int getPosX()
+ void setPosX(int)
+ int getPosY()
+ void setPosY()
+ int getColor()
+ void setColor(int)
+ String getContent()
+ void setContent(String)
}

' --- Observer ---

package observer {
    class IPublisher
    class IObserver
    class IMessage
    interface IMessageData
}

abstract class IPublisher {
- Set<IObserver> observers
+ Set<IObserver> getObservers()
+ void setObservers(Set<IObserver>)
+ void publish(IMessage)
+ void addObserver(IObserver)
+ void removeObserver(IObserver)
}
abstract class IObserver {
- Set<IPublisher> publishers
+ Set<IPublisher> getPublishers()
+ void setPublishers(Set<IPublisher>)
+ void receive(Object)
+ void addPublisher(IPublisher)
+ void removePublisher(IPublisher)
}
abstract class IMessage<S, T> {
- S status
- T data
+ S getStatus()
+ T getData()
+ boolean equals(Object)
+ int hashCode()
}
interface IMessageData<T> {
- T sender
+ T getSender()
}

' --- ApplicationFramework ---

class AppCore <<Singleton>> {
+ {static} void main(String[])
+ {static} ApplicationFramework getInstance()
}
class AppCoreSingleton {
+ {static} AppCore INSTANCE
}
abstract class ApplicationFramework {
# IConstants iConstants
# IConfigHandler iConfigHandler
# IErrorHandler iErrorHandler
# IGui iGui
# ProjectExplorer projectExplorer
# IFileSystem iFileSystem
+ void initialize(IConstants,IConfigHandler,IErrorHandler,IGui,ProjectExplorer,IFileSystem)
+ IConstants getConstants()
+ IConfigHandler getConfigHandler()
+ IErrorHandler getErrorHandler()
+ IGui getGui()
+ ProjectExplorer getProjectExplorer()
+ IFileSystem getFileSystem()
}

' --- Addon ---

' --- ConfigHandler ---

' --- Constants ---

package confighandler {
    interface IConfigHandler
}

interface IConfigHandler {
+ boolean loadConfig(String)
+ boolean loadConfig()
+ void saveConfig()
+ void resetConfig()
+ void set(String,String)
+ Object get(String)
+ Object get(String,Object)
+ Object getOrDefault(String,Object)
}

' --- Filesystem ---

' --- GUI ---

' --- GUI.Swing? ---
class GuiSwing {
+ void run()
}
class MapTreeCellRenderer {
+ Component getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)
}
class MapTreeItem {
- IMapNode mapNode
+ IMapNode getMapNode()
+ void setMapNode(IMapNode)
+ void setName(String)
+ String toString()
}
class MyMenuBar {
}
class ProjectPanel {
- JTabbedPane tabs
- Project project
- List<MindMap> tabIndexes
- JLabel nodeName
- JLabel authorName
- JButton add
- JButton edit
- JButton delete
+ void openMindMap(MindMap)
+ void closeMindMap(MindMap)
}
class MapTreeCellEditor {
- Object clickedOn
- JTextField edit
+ Component getTreeCellEditorComponent(JTree,Object,boolean,boolean,boolean,int)
+ boolean isCellEditable(EventObject)
+ void actionPerformed(ActionEvent)
}
class MainFrame {
- {static} ProjectExplorer projectExplorer
- {static} MainFrame instance
- MyMenuBar menu
- Toolbar toolbar
- ActionManager actionManager
- IMapTree mapTree
- MapTreeView mapTreeView
- ProjectExplorerPanel projectExplorerPanel
+ {static} MainFrame getInstance()
+ ProjectExplorerPanel getProjectExplorerPanel()
+ MyMenuBar getMenu()
+ Toolbar getToolbar()
+ IMapTree getMapTree()
+ MapTreeView getMapTreeView()
- void initialise()
+ ActionManager getActionManager()
}
interface IProjectPanel {
~ void openMindMap(MindMap)
~ void closeMindMap(MindMap)
}
interface IGuiAddon {
}
class ActionManager {
- StudentInfoAction studentInfoAction
- NewAction newAction
- DeleteAction mapTreeCellDelete
- ProjectAuthorAction projectAuthorAction
+ void initActions()
+ StudentInfoAction getStudentInfoAction()
+ NewAction getNewAction()
+ DeleteAction getDeleteAction()
+ ProjectAuthorAction getProjectAuthorAction()
}
class MapTree {
- MapTreeItem root
- DefaultTreeModel defaultTreeModel
- MapTreeView treeView
+ MapTreeView generateTree(ProjectExplorer)
+ void refreshTree(boolean)
+ MapTreeItem getSelectedNode()
}
interface IGui {
~ void run()
}
class Toolbar {
}
class MapTreeSelectionListener {
+ void valueChanged(TreeSelectionEvent)
}

interface IMapTree {
~ MapTreeView generateTree(ProjectExplorer)
~ void refreshTree()
~ void refreshTree(boolean)
~ MapTreeItem getSelectedNode()
}
class MapTreeView {
}
class MapTree {
- MapTreeItem root
- DefaultTreeModel defaultTreeModel
- MapTreeView treeView
+ MapTreeView generateTree(ProjectExplorer)
+ void refreshTree(boolean)
+ MapTreeItem getSelectedNode()
}
' --- Relations ---

IMapNodeComposite <|-- ProjectExplorer
ApplicationFramework <|-- AppCore
AppCore +.. AppCore.AppCoreSingleton
IMapNode <|-- Element
IMapNodeComposite <|-- MindMap
IPublisher <|-- IAddon
IPublisher <|-- IMapNode
IMapNode +.. Message
IMessage <|-- Message
Message +.. EditedMessageData
IMessageData <|-- EditedMessageData
Message +.. ParentChangeMessageData
IMessageData <|-- ParentChangeMessageData
IMapNodeComposite <|-- Project
IConstants <|.. StandardConstants
IFileSystem +.. Message
IMessage <|-- Message
IPublisher <|-- IAddonManager
IAddonManager +.. Message
IMessage <|-- Message
Message +.. AddonInitializedMessageData
IMessageData <|-- AddonInitializedMessageData
IConfigHandler <|.. StandardConfigHandler
IPublisher <|-- StandardConfigHandler
IGui <|.. GuiSwing
IConfigHandler +.. Message
IMessage <|-- Message
Message +.. ConfigMessageData
IMessageData <|-- ConfigMessageData
Message +.. ConfigChangeMessageData
IMessageData <|-- ConfigChangeMessageData
IObserver <|-- IPublisher
IFileSystem <|.. LocalFileSystem
IPublisher <|-- LocalFileSystem
IMapNode <|-- IMapNodeComposite
IMapNodeComposite +.. Message
IMessage <|-- Message
Message +.. ChildChangeMessageData
IMessageData <|-- ChildChangeMessageData
IAddonManager <|-- StandardAddonManager
MainFrame o-- MyMenuBar
MainFrame "1..1" - "1..1" GuiSwing
GuiSwing o-- AppCore
MainFrame o-- Toolbar
MainFrame o-- MapTreeView
MapTreeView *-- MapTree
IMapTree <|.. MapTree
MapTreeView *-- MapTreeCellEditor
MapTreeView *-- MapTreeCellRenderer
MapTreeView *-- MapTreeSelectionListener


@enduml